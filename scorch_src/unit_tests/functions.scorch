var status := 'failed'

lambda := || => {
    break true
}

lambda_args_test := |a, b, c| => {
    assert(a == 1, 'lambda_args_test failed assert0: print int arg')
    assert(b == true, 'lambda_args_test failed assert1 : print bool arg')
    assert(c == '3', 'lambda_args_test failed assert2 : print string arg')
    break true 
}

assert(lambda(), 'lambda fn assigned to a field failed to return true')

assert(lambda_args_test(1, true, '3'), 'lambda fn literal failed to return true')


implicit_fn_test_params := (a: string) {
    println('recursive func ', a)
    status = 'passed'
}

implicit_fn_test_no_params := {
    status = 'passed'
    println('recursive func paramless')
}

implicit_fn_test_params('my argument')

assert(status == 'passed', 'failed to pass functions.scorch')

implicit_fn_test_no_params()

