//# BEGIN CURRENTLY PARSEABLE
explicitly_typed_variable : type = value
Dynamically_typed_variable := value

x := 100.0
y : Double = 2500.16

//# to demonstrate both : 
//# such as 
name : String = 'joe schmoe'
birthplace : String = "america"
age : String = 'mid 20s'
height : Double = '6 feet, 3.758168 inches'

//# is the same as
name := 'joe schmoe'
birthplace := "america"
age := 'mid 20s'
height := '6 feet, 3.758168 inches'

// arrays
z : Array = [0,1,2]
z := [0,1,2,3]
xx := z[0]
z[0] = z[1]
z.push(0)
z.pop()
//# Strings may start or end with " and ' interchangably.
//# right now, as much of a bug as it is, you may start a String with ' and end with ".

//# concatenating Strings:

first_name := 'Cyitlec' //# ch yee t' leck
last_name := 'Kivals' //  # kih vahlS
full_name := first_name + ' ' + last_name

equals : Fn(a : String, b : String) -> Bool {
    break a == b
}

equals := (a : String, b : String) {
    break a == b // return nyi, break does a similar thing.
}

void_parametersless := {
    //# return not yet implemented   
}

void_parametersless()

equals("a", "b")


//#  extension method to any array instance, 
//#  usage : 
//#  array := [0,1,2]
//#  callback := (index :Int, value: Int){
//#    msg := tostr(index) = " : " = tostr(value)
//#    println(msg) 
//# }
//#  array.foreach(callback)
foreach := (array:Array, callback:Fn) {
    repeat i < (len(array)) {
        callback(i, array[i])
    }
}
//# END CURRENTLY PARSEABLE
