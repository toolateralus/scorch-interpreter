   Compiling scorch-lang v0.1.0 (/home/josh/source/rust/scorch-lang)
warning: unused import: `Write`
 --> src/main.rs:7:21
  |
7 | use std::io::{Read, Write};
  |                     ^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `Visitor`
 --> src/main.rs:9:17
  |
9 | use ast::{Node, Visitor};
  |                 ^^^^^^^

warning: unused variable: `lhs`
   --> src/ast.rs:132:42
    |
132 |             Node::RelationalExpression { lhs, op, rhs } => visitor.visit_relational_expression(self),
    |                                          ^^^ help: try ignoring the field: `lhs: _`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `op`
   --> src/ast.rs:132:47
    |
132 |             Node::RelationalExpression { lhs, op, rhs } => visitor.visit_relational_expression(self),
    |                                               ^^ help: try ignoring the field: `op: _`

warning: unused variable: `rhs`
   --> src/ast.rs:132:51
    |
132 |             Node::RelationalExpression { lhs, op, rhs } => visitor.visit_relational_expression(self),
    |                                                   ^^^ help: try ignoring the field: `rhs: _`

warning: unused variable: `lhs`
   --> src/ast.rs:133:39
    |
133 |             Node::LogicalExpression { lhs, op, rhs } => visitor.visit_logical_expression(self),
    |                                       ^^^ help: try ignoring the field: `lhs: _`

warning: unused variable: `op`
   --> src/ast.rs:133:44
    |
133 |             Node::LogicalExpression { lhs, op, rhs } => visitor.visit_logical_expression(self),
    |                                            ^^ help: try ignoring the field: `op: _`

warning: unused variable: `rhs`
   --> src/ast.rs:133:48
    |
133 |             Node::LogicalExpression { lhs, op, rhs } => visitor.visit_logical_expression(self),
    |                                                ^^^ help: try ignoring the field: `rhs: _`

warning: unused variable: `lhs`
   --> src/ast.rs:134:37
    |
134 |             Node::BinaryOperation { lhs, op, rhs } => visitor.visit_binary_op(self),
    |                                     ^^^ help: try ignoring the field: `lhs: _`

warning: unused variable: `op`
   --> src/ast.rs:134:42
    |
134 |             Node::BinaryOperation { lhs, op, rhs } => visitor.visit_binary_op(self),
    |                                          ^^ help: try ignoring the field: `op: _`

warning: unused variable: `rhs`
   --> src/ast.rs:134:46
    |
134 |             Node::BinaryOperation { lhs, op, rhs } => visitor.visit_binary_op(self),
    |                                              ^^^ help: try ignoring the field: `rhs: _`

warning: value assigned to `token` is never read
   --> src/ast.rs:191:13
    |
191 |     let mut token = get_current(tokens, index);
    |             ^^^^^
    |
    = help: maybe it is overwritten before being read?
    = note: `#[warn(unused_assignments)]` on by default

warning: unused variable: `node`
   --> src/ast.rs:496:36
    |
496 |                 if let Node::NegOp(node) = node {
    |                                    ^^^^ help: if this is intentional, prefix it with an underscore: `_node`

warning: unused variable: `node`
   --> src/ast.rs:505:36
    |
505 |                 if let Node::NotOp(node) = node {
    |                                    ^^^^ help: if this is intentional, prefix it with an underscore: `_node`

warning: value assigned to `value` is never read
  --> src/runtime.rs:47:21
   |
47 |             let mut value: ValueType = ValueType::None(());
   |                     ^^^^^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `val` is never read
   --> src/runtime.rs:110:25
    |
110 |                 let mut val = ValueType::None(());
    |                         ^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `result` is never read
   --> src/runtime.rs:367:17
    |
367 |         let mut result: f64 = NAN;
    |                 ^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: function `test_if_else_statements` is never used
  --> src/main.rs:42:4
   |
42 | fn test_if_else_statements() {
   |    ^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(dead_code)]` on by default

warning: function `test_fields_vars_literal` is never used
  --> src/main.rs:47:4
   |
47 | fn test_fields_vars_literal() {
   |    ^^^^^^^^^^^^^^^^^^^^^^^^

warning: function `test_rel_expr` is never used
  --> src/main.rs:52:4
   |
52 | fn test_rel_expr() {
   |    ^^^^^^^^^^^^^

warning: function `execute_return_global_ctx` is never used
  --> src/main.rs:90:4
   |
90 | fn execute_return_global_ctx(filename: String) -> Box<Context> {
   |    ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: `scorch-lang` (bin "scorch-lang") generated 21 warnings (run `cargo fix --bin "scorch-lang"` to apply 13 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.58s
     Running `target/debug/scorch-lang`
